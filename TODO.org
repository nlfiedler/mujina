# TODO

## Learning

- [DONE] Go through Dan Abramov's Redux course on egghead.io
- [DONE] Go through Dan Abramov's React/Redux course
- [DONE] What is the difference between `export` and `exports`?
  - The `export` statement is new and only supported in Chrome and Safari.
  - Transpilers such as Babel support it
  - node.js is entirely its own thing, with module.exports and exports

## Overall

- [DONE] Get it connected to the backend, log tags in console
- [DONE] Get a list of available tags, show in the page
- [DONE] Set up a persistent configuration for development
- [DONE] Learn how to write doc comments (apparently it's JSDoc)
- [DONE] Create a drop zone for drag-n-drop; combine with file selector
- [DONE] Have dropped files get uploaded into the backend
- [DONE] Add a copyright header to all of the source code
- [DONE] Write a basic README file
- [DONE] Figure out how to manage multiple windows
- [DONE] Set the minimum size of the main window to something reasonable
- [DONE] Figure out how to use Redux for modeling the app state
  - [DONE] Go through a Redux tutorial
  - [DONE] Write some redux actions and reducers to get started
  - [DONE] Write mocha tests for the redux code
  - [DONE] need to set up electron for testing so we can load its modules
  - [DONE] Look for a library that does the basics of async API calls like Elm's remotedata
  - [DONE] Write tests that exercise the reducers code
  - [DONE] Consider https://github.com/pburtchaell/redux-promise-middleware
  - [DONE] See "runSaga" in redux-saga API reference for code organization and startup
  - [DONE] Look at redux guides for streamlining the reducers code
  - [DONE] Set up a mock backend for testing
  - [DONE] Use https://redux-saga.js.org for data fetching
  - [DONE] Look at using immutable.js for the redux state
  - [DONE] Look at using https://github.com/leoasis/redux-immutable-state-invariant
  - [DONE] Look at using https://github.com/socialtables/redux-unhandled-action
  - [DONE] Look at `normalizr` npm for "Normalizing API Responses" (see Abramov's react #26)
  - [DONE] Look at https://github.com/evgenyrodionov/redux-logger
- [DONE] Look for examples of source code layout
- [TODO] Set up basic interface with React
  - [DONE] Go through a React tutorial (again)
  - [DONE] Read https://reactjs.org/docs/thinking-in-react.html
  - [DONE] Set up gulp to build the React components
  - [DONE] Plug the React components into index.html
  - [DONE] Move source code into some directory
  - [DONE] Read https://redux.js.org/docs/basics/UsageWithReact.html for integrating redux
  - [TODO] Maybe watch https://reactforbeginners.com ($139)
  - [TODO] Use https://reacttraining.com/react-router/ for routing
    - It has react-router-redux to stay in sync with redux
  - [TODO] See how https://github.com/erikras/redux-form can help
  - [TODO] See how https://github.com/davidkpiano/react-redux-form can help
  - [TODO] See http://airbnb.io/enzyme/ for writing React tests
- [DONE] Use React to build the tags list
  - [DONE] Implement the TOGGLE_TAG in reducers.js
  - [DONE] Use some styling to make the tag list look interesting
  - [DONE] Use https://github.com/hardchor/electron-redux so main/renderer share a single instance
- [TODO] Introduce bulma or something for the styling
  - [TODO] Add some placeholder content in the middle
  - [TODO] Add the years and locations selectors
  - [TODO] Get the drop zone into a tile
- [TODO] Use React to build the drop zone
- [TODO] Consider https://github.com/reactjs/reselect for efficiently selecting things (i.e. paging)
- [TODO] See how Dan Abramov uses thunks and redux to handle "loading" status
  - https://egghead.io/courses/building-react-applications-with-idiomatic-redux #21 to #24
- [TODO] Consider options for streamlining development process
  - https://github.com/Quramy/electron-connect to reload electron
- [TODO] Show uploaded assets in a list with editable fields
- [TODO] Commit edited data to the corresponding database records
- [TODO] Consider how to make app/backend combination more efficient
  - That is, if both are on the same machine, access assets directly
    - Can generate thumbnails and previews in the app vs backend
  - And, "upload" assets by storing them directly to the destination
  - Otherwise, must upload via HTTP
- [TODO] Investigate how to localize the app
  - https://www.npmjs.com/package/oftn-l10n
  - https://developer.mozilla.org/en-US/docs/Mozilla/Localization/Localization_content_best_practices
- [TODO] Decide on how to do routing (static vs dynamic), see NOTES.md
- [TODO] Consider storing assets in timestamped directories with original file names
  - How to deal with name collisions? Would that even happen?
  - If assets are uploaded individually, do they each go in a separate directory?
  - Would need an in-memory mapping of SHA256 to asset file path to avoid DB query
- [TODO] Look into automated testing frameworks for Electron apps
- [TODO] Consider setting the application menu appropriately for macOS and win32
- [TODO] Create a "New Window" menu item that invokes createWindow()
- [TODO] Find out how to handle unresponsive windows
- [TODO] Start filing issues to track progress, with milestones
- [TODO] Make the number of cached thumbnails depend on the available memory
- [TODO] Support browsing by year and month (likely without paging)
- [TODO] Show video thumbnails using video HTML tag so they can play directly
- [TODO] Show selected frames from videos on mouse-over
- [TODO] Bulk edit feature
  - Design a query page that allows searching on several fields (tags, date, location)
  - Use a temporary view (http://docs.couchdb.org/en/1.6.1/api/database/temp-views.html)
  - Multi-select the displayed results
  - Present a form for changing one or more fields of the selected assets
- [TODO] Option on asset screen to rotate an image (some images lack orientation data)
- [TODO] See https://github.com/Quramy/electron-jsx-babel-boilerplate/
  - uses gulp to minify and uglify everything
- [TODO] Set the browser window title (in index.html) to something sensible

## Research

- [TODO] What does macOS Photos offer? Should at least be better than that

## App/Daemon combo

- [TODO] Change backend to support 'upload' in which asset is already in position
